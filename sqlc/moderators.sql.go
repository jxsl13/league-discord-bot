// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: moderators.sql

package sqlc

import (
	"context"
	"strings"
)

const addMatchModerator = `-- name: AddMatchModerator :exec
INSERT INTO moderators (
    channel_id,
    user_id
) VALUES (
    ?1,
    ?2
)
`

type AddMatchModeratorParams struct {
	ChannelID string `db:"channel_id"`
	UserID    string `db:"user_id"`
}

func (q *Queries) AddMatchModerator(ctx context.Context, arg AddMatchModeratorParams) error {
	_, err := q.exec(ctx, q.addMatchModeratorStmt, addMatchModerator, arg.ChannelID, arg.UserID)
	return err
}

const deleteAllMatchModerators = `-- name: DeleteAllMatchModerators :exec
DELETE FROM moderators
WHERE channel_id = ?1
`

func (q *Queries) DeleteAllMatchModerators(ctx context.Context, channelID string) error {
	_, err := q.exec(ctx, q.deleteAllMatchModeratorsStmt, deleteAllMatchModerators, channelID)
	return err
}

const deleteMatchModerator = `-- name: DeleteMatchModerator :exec
DELETE FROM moderators
WHERE channel_id = ?1
AND user_id = ?2
`

type DeleteMatchModeratorParams struct {
	ChannelID string `db:"channel_id"`
	UserID    string `db:"user_id"`
}

func (q *Queries) DeleteMatchModerator(ctx context.Context, arg DeleteMatchModeratorParams) error {
	_, err := q.exec(ctx, q.deleteMatchModeratorStmt, deleteMatchModerator, arg.ChannelID, arg.UserID)
	return err
}

const deleteMatchModerators = `-- name: DeleteMatchModerators :exec
DELETE FROM moderators
WHERE channel_id = ?1
AND user_id IN (/*SLICE::user_ids*/?)
`

type DeleteMatchModeratorsParams struct {
	ChannelID string   `db:"channel_id"`
	UserIds   []string `db:":user_ids"`
}

func (q *Queries) DeleteMatchModerators(ctx context.Context, arg DeleteMatchModeratorsParams) error {
	query := deleteMatchModerators
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ChannelID)
	if len(arg.UserIds) > 0 {
		for _, v := range arg.UserIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE::user_ids*/?", strings.Repeat(",?", len(arg.UserIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE::user_ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const listMatchModerators = `-- name: ListMatchModerators :many
SELECT
    channel_id,
    user_id
FROM moderators
WHERE channel_id = ?1
ORDER BY user_id
`

func (q *Queries) ListMatchModerators(ctx context.Context, channelID string) ([]Moderator, error) {
	rows, err := q.query(ctx, q.listMatchModeratorsStmt, listMatchModerators, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Moderator{}
	for rows.Next() {
		var i Moderator
		if err := rows.Scan(&i.ChannelID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
