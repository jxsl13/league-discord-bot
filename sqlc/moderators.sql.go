// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: moderators.sql

package sqlc

import (
	"context"
	"strings"
)

const addMatchModeratorRole = `-- name: AddMatchModeratorRole :exec
INSERT INTO moderator_roles (
    channel_id,
    role_id
) VALUES (
    ?1,
    ?2
)
`

type AddMatchModeratorRoleParams struct {
	ChannelID int64  `db:"channel_id"`
	RoleID    string `db:"role_id"`
}

func (q *Queries) AddMatchModeratorRole(ctx context.Context, arg AddMatchModeratorRoleParams) error {
	_, err := q.exec(ctx, q.addMatchModeratorRoleStmt, addMatchModeratorRole, arg.ChannelID, arg.RoleID)
	return err
}

const deleteAllMatchModeratorRoles = `-- name: DeleteAllMatchModeratorRoles :exec
DELETE FROM moderator_roles
WHERE channel_id = ?1
`

func (q *Queries) DeleteAllMatchModeratorRoles(ctx context.Context, channelID int64) error {
	_, err := q.exec(ctx, q.deleteAllMatchModeratorRolesStmt, deleteAllMatchModeratorRoles, channelID)
	return err
}

const deleteMatchModeratorRole = `-- name: DeleteMatchModeratorRole :exec
DELETE FROM moderator_roles
WHERE channel_id = ?1
AND role_id = ?2
`

type DeleteMatchModeratorRoleParams struct {
	ChannelID int64  `db:"channel_id"`
	RoleID    string `db:"role_id"`
}

func (q *Queries) DeleteMatchModeratorRole(ctx context.Context, arg DeleteMatchModeratorRoleParams) error {
	_, err := q.exec(ctx, q.deleteMatchModeratorRoleStmt, deleteMatchModeratorRole, arg.ChannelID, arg.RoleID)
	return err
}

const deleteMatchModeratorRoles = `-- name: DeleteMatchModeratorRoles :exec
DELETE FROM moderator_roles
WHERE channel_id = ?1
AND role_id IN (/*SLICE::role_ids*/?)
`

type DeleteMatchModeratorRolesParams struct {
	ChannelID int64    `db:"channel_id"`
	RoleIds   []string `db:":role_ids"`
}

func (q *Queries) DeleteMatchModeratorRoles(ctx context.Context, arg DeleteMatchModeratorRolesParams) error {
	query := deleteMatchModeratorRoles
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ChannelID)
	if len(arg.RoleIds) > 0 {
		for _, v := range arg.RoleIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE::role_ids*/?", strings.Repeat(",?", len(arg.RoleIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE::role_ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const listMatchModeratorRoles = `-- name: ListMatchModeratorRoles :many
SELECT
    channel_id,
    role_id
FROM moderator_roles
WHERE channel_id = ?1
`

func (q *Queries) ListMatchModeratorRoles(ctx context.Context, channelID int64) ([]ModeratorRole, error) {
	rows, err := q.query(ctx, q.listMatchModeratorRolesStmt, listMatchModeratorRoles, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ModeratorRole{}
	for rows.Next() {
		var i ModeratorRole
		if err := rows.Scan(&i.ChannelID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
