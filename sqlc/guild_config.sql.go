// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: guild_config.sql

package sqlc

import (
	"context"
)

const addGuildConfig = `-- name: AddGuildConfig :exec
INSERT OR IGNORE INTO guild_config (
    guild_id,
    enabled,
    category_id,
    channel_access_offset,
    event_creation_enabled,
    channel_delete_offset,
    requirements_offset,
    notification_offsets
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7,
    ?8
)
`

type AddGuildConfigParams struct {
	GuildID              string `db:"guild_id"`
	Enabled              int64  `db:"enabled"`
	CategoryID           string `db:"category_id"`
	ChannelAccessOffset  int64  `db:"channel_access_offset"`
	EventCreationEnabled int64  `db:"event_creation_enabled"`
	ChannelDeleteOffset  int64  `db:"channel_delete_offset"`
	RequirementsOffset   int64  `db:"requirements_offset"`
	NotificationOffsets  string `db:"notification_offsets"`
}

func (q *Queries) AddGuildConfig(ctx context.Context, arg AddGuildConfigParams) error {
	_, err := q.exec(ctx, q.addGuildConfigStmt, addGuildConfig,
		arg.GuildID,
		arg.Enabled,
		arg.CategoryID,
		arg.ChannelAccessOffset,
		arg.EventCreationEnabled,
		arg.ChannelDeleteOffset,
		arg.RequirementsOffset,
		arg.NotificationOffsets,
	)
	return err
}

const countDisabledGuilds = `-- name: CountDisabledGuilds :one
SELECT COUNT(guild_id)
FROM guild_config
WHERE enabled = 0
`

func (q *Queries) CountDisabledGuilds(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countDisabledGuildsStmt, countDisabledGuilds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEnabledGuilds = `-- name: CountEnabledGuilds :one
SELECT COUNT(guild_id)
FROM guild_config
WHERE enabled = 1
`

func (q *Queries) CountEnabledGuilds(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countEnabledGuildsStmt, countEnabledGuilds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteGuildConfig = `-- name: DeleteGuildConfig :exec
DELETE FROM guild_config
WHERE guild_id = ?1
`

func (q *Queries) DeleteGuildConfig(ctx context.Context, guildID string) error {
	_, err := q.exec(ctx, q.deleteGuildConfigStmt, deleteGuildConfig, guildID)
	return err
}

const disableGuild = `-- name: DisableGuild :exec
UPDATE guild_config
SET
    enabled = 0
WHERE guild_id = ?1
`

func (q *Queries) DisableGuild(ctx context.Context, guildID string) error {
	_, err := q.exec(ctx, q.disableGuildStmt, disableGuild, guildID)
	return err
}

const getGuildConfig = `-- name: GetGuildConfig :one
SELECT
    guild_id,
    enabled,
    category_id,
    channel_access_offset,
    event_creation_enabled,
    channel_delete_offset,
    requirements_offset,
    notification_offsets
FROM guild_config
WHERE guild_id = ?1
`

type GetGuildConfigRow struct {
	GuildID              string `db:"guild_id"`
	Enabled              int64  `db:"enabled"`
	CategoryID           string `db:"category_id"`
	ChannelAccessOffset  int64  `db:"channel_access_offset"`
	EventCreationEnabled int64  `db:"event_creation_enabled"`
	ChannelDeleteOffset  int64  `db:"channel_delete_offset"`
	RequirementsOffset   int64  `db:"requirements_offset"`
	NotificationOffsets  string `db:"notification_offsets"`
}

func (q *Queries) GetGuildConfig(ctx context.Context, guildID string) (GetGuildConfigRow, error) {
	row := q.queryRow(ctx, q.getGuildConfigStmt, getGuildConfig, guildID)
	var i GetGuildConfigRow
	err := row.Scan(
		&i.GuildID,
		&i.Enabled,
		&i.CategoryID,
		&i.ChannelAccessOffset,
		&i.EventCreationEnabled,
		&i.ChannelDeleteOffset,
		&i.RequirementsOffset,
		&i.NotificationOffsets,
	)
	return i, err
}

const getGuildConfigByCategory = `-- name: GetGuildConfigByCategory :one
SELECT
    guild_id,
    enabled,
    category_id,
    channel_access_offset,
    event_creation_enabled,
    channel_delete_offset,
    requirements_offset,
    notification_offsets
FROM guild_config
WHERE category_id = ?1
LIMIT 1
`

type GetGuildConfigByCategoryRow struct {
	GuildID              string `db:"guild_id"`
	Enabled              int64  `db:"enabled"`
	CategoryID           string `db:"category_id"`
	ChannelAccessOffset  int64  `db:"channel_access_offset"`
	EventCreationEnabled int64  `db:"event_creation_enabled"`
	ChannelDeleteOffset  int64  `db:"channel_delete_offset"`
	RequirementsOffset   int64  `db:"requirements_offset"`
	NotificationOffsets  string `db:"notification_offsets"`
}

func (q *Queries) GetGuildConfigByCategory(ctx context.Context, categoryID string) (GetGuildConfigByCategoryRow, error) {
	row := q.queryRow(ctx, q.getGuildConfigByCategoryStmt, getGuildConfigByCategory, categoryID)
	var i GetGuildConfigByCategoryRow
	err := row.Scan(
		&i.GuildID,
		&i.Enabled,
		&i.CategoryID,
		&i.ChannelAccessOffset,
		&i.EventCreationEnabled,
		&i.ChannelDeleteOffset,
		&i.RequirementsOffset,
		&i.NotificationOffsets,
	)
	return i, err
}

const isGuildEnabled = `-- name: IsGuildEnabled :one
SELECT enabled
FROM guild_config
WHERE guild_id = ?1
`

func (q *Queries) IsGuildEnabled(ctx context.Context, guildID string) (int64, error) {
	row := q.queryRow(ctx, q.isGuildEnabledStmt, isGuildEnabled, guildID)
	var enabled int64
	err := row.Scan(&enabled)
	return enabled, err
}

const nextMatchCounter = `-- name: NextMatchCounter :one
UPDATE guild_config
SET match_counter = match_counter + 1
WHERE guild_id = ?1
RETURNING match_counter
`

func (q *Queries) NextMatchCounter(ctx context.Context, guildID string) (int64, error) {
	row := q.queryRow(ctx, q.nextMatchCounterStmt, nextMatchCounter, guildID)
	var match_counter int64
	err := row.Scan(&match_counter)
	return match_counter, err
}

const setGuildChannelAccessOffset = `-- name: SetGuildChannelAccessOffset :exec
UPDATE guild_config
SET channel_access_offset = ?1
WHERE guild_id = ?2
`

type SetGuildChannelAccessOffsetParams struct {
	ChannelAccessOffset int64  `db:"channel_access_offset"`
	GuildID             string `db:"guild_id"`
}

func (q *Queries) SetGuildChannelAccessOffset(ctx context.Context, arg SetGuildChannelAccessOffsetParams) error {
	_, err := q.exec(ctx, q.setGuildChannelAccessOffsetStmt, setGuildChannelAccessOffset, arg.ChannelAccessOffset, arg.GuildID)
	return err
}

const setGuildChannelDeleteOffset = `-- name: SetGuildChannelDeleteOffset :exec
UPDATE guild_config
SET channel_delete_offset = ?1
WHERE guild_id = ?2
`

type SetGuildChannelDeleteOffsetParams struct {
	ChannelDeleteOffset int64  `db:"channel_delete_offset"`
	GuildID             string `db:"guild_id"`
}

func (q *Queries) SetGuildChannelDeleteOffset(ctx context.Context, arg SetGuildChannelDeleteOffsetParams) error {
	_, err := q.exec(ctx, q.setGuildChannelDeleteOffsetStmt, setGuildChannelDeleteOffset, arg.ChannelDeleteOffset, arg.GuildID)
	return err
}

const setGuildEnabled = `-- name: SetGuildEnabled :exec
UPDATE guild_config
SET enabled = ?1
WHERE guild_id = ?2
`

type SetGuildEnabledParams struct {
	Enabled int64  `db:"enabled"`
	GuildID string `db:"guild_id"`
}

func (q *Queries) SetGuildEnabled(ctx context.Context, arg SetGuildEnabledParams) error {
	_, err := q.exec(ctx, q.setGuildEnabledStmt, setGuildEnabled, arg.Enabled, arg.GuildID)
	return err
}

const setGuildEventCreationEnabled = `-- name: SetGuildEventCreationEnabled :exec
UPDATE guild_config
SET event_creation_enabled = ?1
WHERE guild_id = ?2
`

type SetGuildEventCreationEnabledParams struct {
	EventCreationEnabled int64  `db:"event_creation_enabled"`
	GuildID              string `db:"guild_id"`
}

func (q *Queries) SetGuildEventCreationEnabled(ctx context.Context, arg SetGuildEventCreationEnabledParams) error {
	_, err := q.exec(ctx, q.setGuildEventCreationEnabledStmt, setGuildEventCreationEnabled, arg.EventCreationEnabled, arg.GuildID)
	return err
}

const setGuildNotificationOffsets = `-- name: SetGuildNotificationOffsets :exec
UPDATE guild_config
SET notification_offsets = ?1
WHERE guild_id = ?2
`

type SetGuildNotificationOffsetsParams struct {
	NotificationOffsets string `db:"notification_offsets"`
	GuildID             string `db:"guild_id"`
}

func (q *Queries) SetGuildNotificationOffsets(ctx context.Context, arg SetGuildNotificationOffsetsParams) error {
	_, err := q.exec(ctx, q.setGuildNotificationOffsetsStmt, setGuildNotificationOffsets, arg.NotificationOffsets, arg.GuildID)
	return err
}

const setGuildRequirementsOffset = `-- name: SetGuildRequirementsOffset :exec
UPDATE guild_config
SET requirements_offset = ?1
WHERE guild_id = ?2
`

type SetGuildRequirementsOffsetParams struct {
	RequirementsOffset int64  `db:"requirements_offset"`
	GuildID            string `db:"guild_id"`
}

func (q *Queries) SetGuildRequirementsOffset(ctx context.Context, arg SetGuildRequirementsOffsetParams) error {
	_, err := q.exec(ctx, q.setGuildRequirementsOffsetStmt, setGuildRequirementsOffset, arg.RequirementsOffset, arg.GuildID)
	return err
}

const updateCategoryId = `-- name: UpdateCategoryId :exec
UPDATE guild_config
SET
    category_id = ?1
WHERE guild_id = ?2
`

type UpdateCategoryIdParams struct {
	CategoryID string `db:"category_id"`
	GuildID    string `db:"guild_id"`
}

func (q *Queries) UpdateCategoryId(ctx context.Context, arg UpdateCategoryIdParams) error {
	_, err := q.exec(ctx, q.updateCategoryIdStmt, updateCategoryId, arg.CategoryID, arg.GuildID)
	return err
}

const updateGuildConfig = `-- name: UpdateGuildConfig :exec
UPDATE guild_config
SET
    enabled = ?1,
    channel_access_offset = ?2,
    event_creation_enabled = ?3,
    channel_delete_offset = ?4,
    requirements_offset = ?5,
    notification_offsets = ?6
WHERE guild_id = ?7
`

type UpdateGuildConfigParams struct {
	Enabled              int64  `db:"enabled"`
	ChannelAccessOffset  int64  `db:"channel_access_offset"`
	EventCreationEnabled int64  `db:"event_creation_enabled"`
	ChannelDeleteOffset  int64  `db:"channel_delete_offset"`
	RequirementsOffset   int64  `db:"requirements_offset"`
	NotificationOffsets  string `db:"notification_offsets"`
	GuildID              string `db:"guild_id"`
}

func (q *Queries) UpdateGuildConfig(ctx context.Context, arg UpdateGuildConfigParams) error {
	_, err := q.exec(ctx, q.updateGuildConfigStmt, updateGuildConfig,
		arg.Enabled,
		arg.ChannelAccessOffset,
		arg.EventCreationEnabled,
		arg.ChannelDeleteOffset,
		arg.RequirementsOffset,
		arg.NotificationOffsets,
		arg.GuildID,
	)
	return err
}
