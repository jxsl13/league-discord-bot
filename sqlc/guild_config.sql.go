// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: guild_config.sql

package sqlc

import (
	"context"
)

const addGuildConfig = `-- name: AddGuildConfig :exec
INSERT OR IGNORE INTO guild_config (
    guild_id,
    enabled,
    category_id,
    channel_delete_delay
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4
)
`

type AddGuildConfigParams struct {
	GuildID            string `db:"guild_id"`
	Enabled            int64  `db:"enabled"`
	CategoryID         string `db:"category_id"`
	ChannelDeleteDelay int64  `db:"channel_delete_delay"`
}

func (q *Queries) AddGuildConfig(ctx context.Context, arg AddGuildConfigParams) error {
	_, err := q.exec(ctx, q.addGuildConfigStmt, addGuildConfig,
		arg.GuildID,
		arg.Enabled,
		arg.CategoryID,
		arg.ChannelDeleteDelay,
	)
	return err
}

const deleteGuildConfig = `-- name: DeleteGuildConfig :exec
DELETE FROM guild_config
WHERE guild_id = ?1
`

func (q *Queries) DeleteGuildConfig(ctx context.Context, guildID string) error {
	_, err := q.exec(ctx, q.deleteGuildConfigStmt, deleteGuildConfig, guildID)
	return err
}

const disableGuild = `-- name: DisableGuild :exec
UPDATE guild_config
SET
    enabled = 0
WHERE guild_id = ?1
`

func (q *Queries) DisableGuild(ctx context.Context, guildID string) error {
	_, err := q.exec(ctx, q.disableGuildStmt, disableGuild, guildID)
	return err
}

const getGuildConfig = `-- name: GetGuildConfig :one
SELECT
    guild_id,
    enabled,
    category_id,
    channel_delete_delay
FROM guild_config
WHERE guild_id = ?1
`

type GetGuildConfigRow struct {
	GuildID            string `db:"guild_id"`
	Enabled            int64  `db:"enabled"`
	CategoryID         string `db:"category_id"`
	ChannelDeleteDelay int64  `db:"channel_delete_delay"`
}

func (q *Queries) GetGuildConfig(ctx context.Context, guildID string) (GetGuildConfigRow, error) {
	row := q.queryRow(ctx, q.getGuildConfigStmt, getGuildConfig, guildID)
	var i GetGuildConfigRow
	err := row.Scan(
		&i.GuildID,
		&i.Enabled,
		&i.CategoryID,
		&i.ChannelDeleteDelay,
	)
	return i, err
}

const getGuildConfigByCategory = `-- name: GetGuildConfigByCategory :one
SELECT
    guild_id,
    enabled,
    category_id,
    channel_delete_delay
FROM guild_config
WHERE category_id = ?1
LIMIT 1
`

type GetGuildConfigByCategoryRow struct {
	GuildID            string `db:"guild_id"`
	Enabled            int64  `db:"enabled"`
	CategoryID         string `db:"category_id"`
	ChannelDeleteDelay int64  `db:"channel_delete_delay"`
}

func (q *Queries) GetGuildConfigByCategory(ctx context.Context, categoryID string) (GetGuildConfigByCategoryRow, error) {
	row := q.queryRow(ctx, q.getGuildConfigByCategoryStmt, getGuildConfigByCategory, categoryID)
	var i GetGuildConfigByCategoryRow
	err := row.Scan(
		&i.GuildID,
		&i.Enabled,
		&i.CategoryID,
		&i.ChannelDeleteDelay,
	)
	return i, err
}

const isGuildEnabled = `-- name: IsGuildEnabled :one
SELECT enabled
FROM guild_config
WHERE guild_id = ?1
`

func (q *Queries) IsGuildEnabled(ctx context.Context, guildID string) (int64, error) {
	row := q.queryRow(ctx, q.isGuildEnabledStmt, isGuildEnabled, guildID)
	var enabled int64
	err := row.Scan(&enabled)
	return enabled, err
}

const nextMatchCounter = `-- name: NextMatchCounter :one
UPDATE guild_config
SET match_counter = match_counter + 1
WHERE guild_id = ?1
RETURNING match_counter
`

func (q *Queries) NextMatchCounter(ctx context.Context, guildID string) (int64, error) {
	row := q.queryRow(ctx, q.nextMatchCounterStmt, nextMatchCounter, guildID)
	var match_counter int64
	err := row.Scan(&match_counter)
	return match_counter, err
}

const updateCategoryId = `-- name: UpdateCategoryId :exec
UPDATE guild_config
SET
    category_id = ?1
WHERE guild_id = ?2
`

type UpdateCategoryIdParams struct {
	CategoryID string `db:"category_id"`
	GuildID    string `db:"guild_id"`
}

func (q *Queries) UpdateCategoryId(ctx context.Context, arg UpdateCategoryIdParams) error {
	_, err := q.exec(ctx, q.updateCategoryIdStmt, updateCategoryId, arg.CategoryID, arg.GuildID)
	return err
}

const updateGuildConfig = `-- name: UpdateGuildConfig :exec
UPDATE guild_config
SET
    enabled = ?1,
    category_id = ?2,
    channel_delete_delay = ?3
WHERE guild_id = ?4
`

type UpdateGuildConfigParams struct {
	Enabled            int64  `db:"enabled"`
	CategoryID         string `db:"category_id"`
	ChannelDeleteDelay int64  `db:"channel_delete_delay"`
	GuildID            string `db:"guild_id"`
}

func (q *Queries) UpdateGuildConfig(ctx context.Context, arg UpdateGuildConfigParams) error {
	_, err := q.exec(ctx, q.updateGuildConfigStmt, updateGuildConfig,
		arg.Enabled,
		arg.CategoryID,
		arg.ChannelDeleteDelay,
		arg.GuildID,
	)
	return err
}
