// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications.sql

package sqlc

import (
	"context"
)

const addNotification = `-- name: AddNotification :exec
INSERT INTO notifications (
    channel_id,
    notify_at,
    custom_text,
    created_by,
    created_at,
    updated_by,
    updated_at
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7
)
`

type AddNotificationParams struct {
	ChannelID  string `db:"channel_id"`
	NotifyAt   int64  `db:"notify_at"`
	CustomText string `db:"custom_text"`
	CreatedBy  string `db:"created_by"`
	CreatedAt  int64  `db:"created_at"`
	UpdatedBy  string `db:"updated_by"`
	UpdatedAt  int64  `db:"updated_at"`
}

func (q *Queries) AddNotification(ctx context.Context, arg AddNotificationParams) error {
	_, err := q.exec(ctx, q.addNotificationStmt, addNotification,
		arg.ChannelID,
		arg.NotifyAt,
		arg.CustomText,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const countNotifications = `-- name: CountNotifications :one
SELECT COUNT(*)
FROM notifications
WHERE channel_id = ?1
`

func (q *Queries) CountNotifications(ctx context.Context, channelID string) (int64, error) {
	row := q.queryRow(ctx, q.countNotificationsStmt, countNotifications, channelID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteMatchNotifications = `-- name: DeleteMatchNotifications :exec
DELETE FROM notifications
WHERE channel_id = ?1
`

func (q *Queries) DeleteMatchNotifications(ctx context.Context, channelID string) error {
	_, err := q.exec(ctx, q.deleteMatchNotificationsStmt, deleteMatchNotifications, channelID)
	return err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE channel_id = ?1
AND notify_at = ?2
`

type DeleteNotificationParams struct {
	ChannelID string `db:"channel_id"`
	NotifyAt  int64  `db:"notify_at"`
}

func (q *Queries) DeleteNotification(ctx context.Context, arg DeleteNotificationParams) error {
	_, err := q.exec(ctx, q.deleteNotificationStmt, deleteNotification, arg.ChannelID, arg.NotifyAt)
	return err
}

const getNotificationByOffset = `-- name: GetNotificationByOffset :one
SELECT channel_id, notify_at, custom_text
FROM notifications
WHERE channel_id = ?1
ORDER BY notify_at
LIMIT 1
OFFSET ?2
`

type GetNotificationByOffsetParams struct {
	ChannelID string `db:"channel_id"`
	Offset    int64  `db:"offset"`
}

type GetNotificationByOffsetRow struct {
	ChannelID  string `db:"channel_id"`
	NotifyAt   int64  `db:"notify_at"`
	CustomText string `db:"custom_text"`
}

func (q *Queries) GetNotificationByOffset(ctx context.Context, arg GetNotificationByOffsetParams) (GetNotificationByOffsetRow, error) {
	row := q.queryRow(ctx, q.getNotificationByOffsetStmt, getNotificationByOffset, arg.ChannelID, arg.Offset)
	var i GetNotificationByOffsetRow
	err := row.Scan(&i.ChannelID, &i.NotifyAt, &i.CustomText)
	return i, err
}

const listDueNotifications = `-- name: ListDueNotifications :many
SELECT
    channel_id,
    notify_at,
    custom_text,
    created_at,
    created_by,
    updated_at,
    updated_by
FROM notifications
WHERE notify_at <= unixepoch('now')
ORDER BY notify_at ASC
`

func (q *Queries) ListDueNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.query(ctx, q.listDueNotificationsStmt, listDueNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ChannelID,
			&i.NotifyAt,
			&i.CustomText,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotifications = `-- name: ListNotifications :many
SELECT channel_id, notify_at, custom_text
FROM notifications
WHERE channel_id = ?1
ORDER BY notify_at ASC
`

type ListNotificationsRow struct {
	ChannelID  string `db:"channel_id"`
	NotifyAt   int64  `db:"notify_at"`
	CustomText string `db:"custom_text"`
}

func (q *Queries) ListNotifications(ctx context.Context, channelID string) ([]ListNotificationsRow, error) {
	rows, err := q.query(ctx, q.listNotificationsStmt, listNotifications, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNotificationsRow{}
	for rows.Next() {
		var i ListNotificationsRow
		if err := rows.Scan(&i.ChannelID, &i.NotifyAt, &i.CustomText); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
