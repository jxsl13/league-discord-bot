// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: access.sql

package sqlc

import (
	"context"
	"strings"
)

const addGuildRoleReadAccess = `-- name: AddGuildRoleReadAccess :exec
INSERT OR REPLACE INTO role_access (
    guild_id,
    role_id,
    permission
) VALUES (
    ?1,
    ?2,
    'READ'
)
`

type AddGuildRoleReadAccessParams struct {
	GuildID string `db:"guild_id"`
	RoleID  string `db:"role_id"`
}

func (q *Queries) AddGuildRoleReadAccess(ctx context.Context, arg AddGuildRoleReadAccessParams) error {
	_, err := q.exec(ctx, q.addGuildRoleReadAccessStmt, addGuildRoleReadAccess, arg.GuildID, arg.RoleID)
	return err
}

const addGuildRoleWriteAccess = `-- name: AddGuildRoleWriteAccess :exec
INSERT OR REPLACE INTO role_access (
    guild_id,
    role_id,
    permission
) VALUES (
    ?1,
    ?2,
    'WRITE'
)
`

type AddGuildRoleWriteAccessParams struct {
	GuildID string `db:"guild_id"`
	RoleID  string `db:"role_id"`
}

func (q *Queries) AddGuildRoleWriteAccess(ctx context.Context, arg AddGuildRoleWriteAccessParams) error {
	_, err := q.exec(ctx, q.addGuildRoleWriteAccessStmt, addGuildRoleWriteAccess, arg.GuildID, arg.RoleID)
	return err
}

const addGuildUserAccess = `-- name: AddGuildUserAccess :exec
INSERT OR REPLACE INTO user_access (
    guild_id,
    user_id,
    permission
) VALUES (
    ?1,
    ?2,
    'READ'
)
`

type AddGuildUserAccessParams struct {
	GuildID string `db:"guild_id"`
	UserID  string `db:"user_id"`
}

func (q *Queries) AddGuildUserAccess(ctx context.Context, arg AddGuildUserAccessParams) error {
	_, err := q.exec(ctx, q.addGuildUserAccessStmt, addGuildUserAccess, arg.GuildID, arg.UserID)
	return err
}

const addGuildUserWriteAccess = `-- name: AddGuildUserWriteAccess :exec
INSERT OR REPLACE INTO user_access (
    guild_id,
    user_id,
    permission
) VALUES (
    ?1,
    ?2,
    'WRITE'
)
`

type AddGuildUserWriteAccessParams struct {
	GuildID string `db:"guild_id"`
	UserID  string `db:"user_id"`
}

func (q *Queries) AddGuildUserWriteAccess(ctx context.Context, arg AddGuildUserWriteAccessParams) error {
	_, err := q.exec(ctx, q.addGuildUserWriteAccessStmt, addGuildUserWriteAccess, arg.GuildID, arg.UserID)
	return err
}

const getGuildRoleAccess = `-- name: GetGuildRoleAccess :one
SELECT
    guild_id,
    role_id,
    permission
FROM role_access
WHERE guild_id = ?1
AND role_id = ?2
`

type GetGuildRoleAccessParams struct {
	GuildID string `db:"guild_id"`
	RoleID  string `db:"role_id"`
}

func (q *Queries) GetGuildRoleAccess(ctx context.Context, arg GetGuildRoleAccessParams) (RoleAccess, error) {
	row := q.queryRow(ctx, q.getGuildRoleAccessStmt, getGuildRoleAccess, arg.GuildID, arg.RoleID)
	var i RoleAccess
	err := row.Scan(&i.GuildID, &i.RoleID, &i.Permission)
	return i, err
}

const getGuildUserAccess = `-- name: GetGuildUserAccess :one
SELECT
    guild_id,
    user_id,
    permission
FROM user_access
WHERE guild_id = ?1
AND user_id = ?2
`

type GetGuildUserAccessParams struct {
	GuildID string `db:"guild_id"`
	UserID  string `db:"user_id"`
}

func (q *Queries) GetGuildUserAccess(ctx context.Context, arg GetGuildUserAccessParams) (UserAccess, error) {
	row := q.queryRow(ctx, q.getGuildUserAccessStmt, getGuildUserAccess, arg.GuildID, arg.UserID)
	var i UserAccess
	err := row.Scan(&i.GuildID, &i.UserID, &i.Permission)
	return i, err
}

const hasRoleAccess = `-- name: HasRoleAccess :one
SELECT 1
FROM role_access
WHERE guild_id = ?1
AND permission = ?2
AND role_id IN (/*SLICE::role_ids*/?)
`

type HasRoleAccessParams struct {
	GuildID    string   `db:"guild_id"`
	Permission string   `db:"permission"`
	RoleIds    []string `db:":role_ids"`
}

func (q *Queries) HasRoleAccess(ctx context.Context, arg HasRoleAccessParams) (int64, error) {
	query := hasRoleAccess
	var queryParams []interface{}
	queryParams = append(queryParams, arg.GuildID)
	queryParams = append(queryParams, arg.Permission)
	if len(arg.RoleIds) > 0 {
		for _, v := range arg.RoleIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE::role_ids*/?", strings.Repeat(",?", len(arg.RoleIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE::role_ids*/?", "NULL", 1)
	}
	row := q.queryRow(ctx, nil, query, queryParams...)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const hasUserAccess = `-- name: HasUserAccess :one
SELECT 1
FROM user_access
WHERE guild_id = ?1
AND permission = ?2
AND user_id = ?3
`

type HasUserAccessParams struct {
	GuildID    string `db:"guild_id"`
	Permission string `db:"permission"`
	UserID     string `db:"user_id"`
}

func (q *Queries) HasUserAccess(ctx context.Context, arg HasUserAccessParams) (int64, error) {
	row := q.queryRow(ctx, q.hasUserAccessStmt, hasUserAccess, arg.GuildID, arg.Permission, arg.UserID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const listGuildRoleAccess = `-- name: ListGuildRoleAccess :many
SELECT
    guild_id,
    role_id,
    permission
FROM role_access
WHERE guild_id = ?1
ORDER BY role_id
`

func (q *Queries) ListGuildRoleAccess(ctx context.Context, guildID string) ([]RoleAccess, error) {
	rows, err := q.query(ctx, q.listGuildRoleAccessStmt, listGuildRoleAccess, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RoleAccess{}
	for rows.Next() {
		var i RoleAccess
		if err := rows.Scan(&i.GuildID, &i.RoleID, &i.Permission); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGuildUserAccess = `-- name: ListGuildUserAccess :many
SELECT
    guild_id,
    user_id,
    permission
FROM user_access
WHERE guild_id = ?1
ORDER BY user_id
`

func (q *Queries) ListGuildUserAccess(ctx context.Context, guildID string) ([]UserAccess, error) {
	rows, err := q.query(ctx, q.listGuildUserAccessStmt, listGuildUserAccess, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAccess{}
	for rows.Next() {
		var i UserAccess
		if err := rows.Scan(&i.GuildID, &i.UserID, &i.Permission); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGuildRoleAccess = `-- name: RemoveGuildRoleAccess :exec
DELETE FROM role_access
WHERE guild_id = ?1
AND role_id = ?2
`

type RemoveGuildRoleAccessParams struct {
	GuildID string `db:"guild_id"`
	RoleID  string `db:"role_id"`
}

func (q *Queries) RemoveGuildRoleAccess(ctx context.Context, arg RemoveGuildRoleAccessParams) error {
	_, err := q.exec(ctx, q.removeGuildRoleAccessStmt, removeGuildRoleAccess, arg.GuildID, arg.RoleID)
	return err
}

const removeGuildUserAccess = `-- name: RemoveGuildUserAccess :exec
DELETE FROM user_access
WHERE guild_id = ?1
AND user_id = ?2
`

type RemoveGuildUserAccessParams struct {
	GuildID string `db:"guild_id"`
	UserID  string `db:"user_id"`
}

func (q *Queries) RemoveGuildUserAccess(ctx context.Context, arg RemoveGuildUserAccessParams) error {
	_, err := q.exec(ctx, q.removeGuildUserAccessStmt, removeGuildUserAccess, arg.GuildID, arg.UserID)
	return err
}
