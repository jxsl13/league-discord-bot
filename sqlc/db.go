// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addGuildConfigStmt, err = db.PrepareContext(ctx, addGuildConfig); err != nil {
		return nil, fmt.Errorf("error preparing query AddGuildConfig: %w", err)
	}
	if q.addGuildRoleReadAccessStmt, err = db.PrepareContext(ctx, addGuildRoleReadAccess); err != nil {
		return nil, fmt.Errorf("error preparing query AddGuildRoleReadAccess: %w", err)
	}
	if q.addGuildRoleWriteAccessStmt, err = db.PrepareContext(ctx, addGuildRoleWriteAccess); err != nil {
		return nil, fmt.Errorf("error preparing query AddGuildRoleWriteAccess: %w", err)
	}
	if q.addGuildUserAccessStmt, err = db.PrepareContext(ctx, addGuildUserAccess); err != nil {
		return nil, fmt.Errorf("error preparing query AddGuildUserAccess: %w", err)
	}
	if q.addGuildUserWriteAccessStmt, err = db.PrepareContext(ctx, addGuildUserWriteAccess); err != nil {
		return nil, fmt.Errorf("error preparing query AddGuildUserWriteAccess: %w", err)
	}
	if q.addMatchStmt, err = db.PrepareContext(ctx, addMatch); err != nil {
		return nil, fmt.Errorf("error preparing query AddMatch: %w", err)
	}
	if q.addMatchModeratorStmt, err = db.PrepareContext(ctx, addMatchModerator); err != nil {
		return nil, fmt.Errorf("error preparing query AddMatchModerator: %w", err)
	}
	if q.addMatchStreamerStmt, err = db.PrepareContext(ctx, addMatchStreamer); err != nil {
		return nil, fmt.Errorf("error preparing query AddMatchStreamer: %w", err)
	}
	if q.addMatchTeamStmt, err = db.PrepareContext(ctx, addMatchTeam); err != nil {
		return nil, fmt.Errorf("error preparing query AddMatchTeam: %w", err)
	}
	if q.addMatchTeamResultsStmt, err = db.PrepareContext(ctx, addMatchTeamResults); err != nil {
		return nil, fmt.Errorf("error preparing query AddMatchTeamResults: %w", err)
	}
	if q.decreaseMatchTeamConfirmedParticipantsStmt, err = db.PrepareContext(ctx, decreaseMatchTeamConfirmedParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query DecreaseMatchTeamConfirmedParticipants: %w", err)
	}
	if q.deleteAllMatchModeratorsStmt, err = db.PrepareContext(ctx, deleteAllMatchModerators); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllMatchModerators: %w", err)
	}
	if q.deleteAllMatchStreamersStmt, err = db.PrepareContext(ctx, deleteAllMatchStreamers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllMatchStreamers: %w", err)
	}
	if q.deleteAllMatchTeamsStmt, err = db.PrepareContext(ctx, deleteAllMatchTeams); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllMatchTeams: %w", err)
	}
	if q.deleteGuildConfigStmt, err = db.PrepareContext(ctx, deleteGuildConfig); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGuildConfig: %w", err)
	}
	if q.deleteGuildMatchesStmt, err = db.PrepareContext(ctx, deleteGuildMatches); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGuildMatches: %w", err)
	}
	if q.deleteMatchStmt, err = db.PrepareContext(ctx, deleteMatch); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMatch: %w", err)
	}
	if q.deleteMatchModeratorStmt, err = db.PrepareContext(ctx, deleteMatchModerator); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMatchModerator: %w", err)
	}
	if q.deleteMatchModeratorsStmt, err = db.PrepareContext(ctx, deleteMatchModerators); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMatchModerators: %w", err)
	}
	if q.deleteMatchStreamerStmt, err = db.PrepareContext(ctx, deleteMatchStreamer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMatchStreamer: %w", err)
	}
	if q.deleteMatchStreamersStmt, err = db.PrepareContext(ctx, deleteMatchStreamers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMatchStreamers: %w", err)
	}
	if q.deleteMatchTeamStmt, err = db.PrepareContext(ctx, deleteMatchTeam); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMatchTeam: %w", err)
	}
	if q.disableGuildStmt, err = db.PrepareContext(ctx, disableGuild); err != nil {
		return nil, fmt.Errorf("error preparing query DisableGuild: %w", err)
	}
	if q.getGuildConfigStmt, err = db.PrepareContext(ctx, getGuildConfig); err != nil {
		return nil, fmt.Errorf("error preparing query GetGuildConfig: %w", err)
	}
	if q.getGuildConfigByCategoryStmt, err = db.PrepareContext(ctx, getGuildConfigByCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetGuildConfigByCategory: %w", err)
	}
	if q.getGuildRoleAccessStmt, err = db.PrepareContext(ctx, getGuildRoleAccess); err != nil {
		return nil, fmt.Errorf("error preparing query GetGuildRoleAccess: %w", err)
	}
	if q.getGuildUserAccessStmt, err = db.PrepareContext(ctx, getGuildUserAccess); err != nil {
		return nil, fmt.Errorf("error preparing query GetGuildUserAccess: %w", err)
	}
	if q.getMatchStmt, err = db.PrepareContext(ctx, getMatch); err != nil {
		return nil, fmt.Errorf("error preparing query GetMatch: %w", err)
	}
	if q.getMatchTeamStmt, err = db.PrepareContext(ctx, getMatchTeam); err != nil {
		return nil, fmt.Errorf("error preparing query GetMatchTeam: %w", err)
	}
	if q.getMatchTeamByRolesStmt, err = db.PrepareContext(ctx, getMatchTeamByRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetMatchTeamByRoles: %w", err)
	}
	if q.hasRoleAccessStmt, err = db.PrepareContext(ctx, hasRoleAccess); err != nil {
		return nil, fmt.Errorf("error preparing query HasRoleAccess: %w", err)
	}
	if q.hasUserAccessStmt, err = db.PrepareContext(ctx, hasUserAccess); err != nil {
		return nil, fmt.Errorf("error preparing query HasUserAccess: %w", err)
	}
	if q.increaseMatchTeamConfirmedParticipantsStmt, err = db.PrepareContext(ctx, increaseMatchTeamConfirmedParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query IncreaseMatchTeamConfirmedParticipants: %w", err)
	}
	if q.isGuildEnabledStmt, err = db.PrepareContext(ctx, isGuildEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query IsGuildEnabled: %w", err)
	}
	if q.listGuildMatchesStmt, err = db.PrepareContext(ctx, listGuildMatches); err != nil {
		return nil, fmt.Errorf("error preparing query ListGuildMatches: %w", err)
	}
	if q.listGuildRoleAccessStmt, err = db.PrepareContext(ctx, listGuildRoleAccess); err != nil {
		return nil, fmt.Errorf("error preparing query ListGuildRoleAccess: %w", err)
	}
	if q.listGuildUserAccessStmt, err = db.PrepareContext(ctx, listGuildUserAccess); err != nil {
		return nil, fmt.Errorf("error preparing query ListGuildUserAccess: %w", err)
	}
	if q.listMatchModeratorsStmt, err = db.PrepareContext(ctx, listMatchModerators); err != nil {
		return nil, fmt.Errorf("error preparing query ListMatchModerators: %w", err)
	}
	if q.listMatchStreamersStmt, err = db.PrepareContext(ctx, listMatchStreamers); err != nil {
		return nil, fmt.Errorf("error preparing query ListMatchStreamers: %w", err)
	}
	if q.listMatchTeamsStmt, err = db.PrepareContext(ctx, listMatchTeams); err != nil {
		return nil, fmt.Errorf("error preparing query ListMatchTeams: %w", err)
	}
	if q.nextAccessibleChannelStmt, err = db.PrepareContext(ctx, nextAccessibleChannel); err != nil {
		return nil, fmt.Errorf("error preparing query NextAccessibleChannel: %w", err)
	}
	if q.nextMatchChannelDeleteStmt, err = db.PrepareContext(ctx, nextMatchChannelDelete); err != nil {
		return nil, fmt.Errorf("error preparing query NextMatchChannelDelete: %w", err)
	}
	if q.nextMatchCounterStmt, err = db.PrepareContext(ctx, nextMatchCounter); err != nil {
		return nil, fmt.Errorf("error preparing query NextMatchCounter: %w", err)
	}
	if q.nextMatchReminderStmt, err = db.PrepareContext(ctx, nextMatchReminder); err != nil {
		return nil, fmt.Errorf("error preparing query NextMatchReminder: %w", err)
	}
	if q.nextParticipationConfirmationDeadlineStmt, err = db.PrepareContext(ctx, nextParticipationConfirmationDeadline); err != nil {
		return nil, fmt.Errorf("error preparing query NextParticipationConfirmationDeadline: %w", err)
	}
	if q.nextScheduledMatchStmt, err = db.PrepareContext(ctx, nextScheduledMatch); err != nil {
		return nil, fmt.Errorf("error preparing query NextScheduledMatch: %w", err)
	}
	if q.removeGuildRoleAccessStmt, err = db.PrepareContext(ctx, removeGuildRoleAccess); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveGuildRoleAccess: %w", err)
	}
	if q.removeGuildUserAccessStmt, err = db.PrepareContext(ctx, removeGuildUserAccess); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveGuildUserAccess: %w", err)
	}
	if q.rescheduleMatchStmt, err = db.PrepareContext(ctx, rescheduleMatch); err != nil {
		return nil, fmt.Errorf("error preparing query RescheduleMatch: %w", err)
	}
	if q.resetMatchReminderCountStmt, err = db.PrepareContext(ctx, resetMatchReminderCount); err != nil {
		return nil, fmt.Errorf("error preparing query ResetMatchReminderCount: %w", err)
	}
	if q.updateCategoryIdStmt, err = db.PrepareContext(ctx, updateCategoryId); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCategoryId: %w", err)
	}
	if q.updateGuildConfigStmt, err = db.PrepareContext(ctx, updateGuildConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGuildConfig: %w", err)
	}
	if q.updateMatchChannelAccessibilityStmt, err = db.PrepareContext(ctx, updateMatchChannelAccessibility); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMatchChannelAccessibility: %w", err)
	}
	if q.updateMatchReminderCountStmt, err = db.PrepareContext(ctx, updateMatchReminderCount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMatchReminderCount: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addGuildConfigStmt != nil {
		if cerr := q.addGuildConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGuildConfigStmt: %w", cerr)
		}
	}
	if q.addGuildRoleReadAccessStmt != nil {
		if cerr := q.addGuildRoleReadAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGuildRoleReadAccessStmt: %w", cerr)
		}
	}
	if q.addGuildRoleWriteAccessStmt != nil {
		if cerr := q.addGuildRoleWriteAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGuildRoleWriteAccessStmt: %w", cerr)
		}
	}
	if q.addGuildUserAccessStmt != nil {
		if cerr := q.addGuildUserAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGuildUserAccessStmt: %w", cerr)
		}
	}
	if q.addGuildUserWriteAccessStmt != nil {
		if cerr := q.addGuildUserWriteAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addGuildUserWriteAccessStmt: %w", cerr)
		}
	}
	if q.addMatchStmt != nil {
		if cerr := q.addMatchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addMatchStmt: %w", cerr)
		}
	}
	if q.addMatchModeratorStmt != nil {
		if cerr := q.addMatchModeratorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addMatchModeratorStmt: %w", cerr)
		}
	}
	if q.addMatchStreamerStmt != nil {
		if cerr := q.addMatchStreamerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addMatchStreamerStmt: %w", cerr)
		}
	}
	if q.addMatchTeamStmt != nil {
		if cerr := q.addMatchTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addMatchTeamStmt: %w", cerr)
		}
	}
	if q.addMatchTeamResultsStmt != nil {
		if cerr := q.addMatchTeamResultsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addMatchTeamResultsStmt: %w", cerr)
		}
	}
	if q.decreaseMatchTeamConfirmedParticipantsStmt != nil {
		if cerr := q.decreaseMatchTeamConfirmedParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decreaseMatchTeamConfirmedParticipantsStmt: %w", cerr)
		}
	}
	if q.deleteAllMatchModeratorsStmt != nil {
		if cerr := q.deleteAllMatchModeratorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllMatchModeratorsStmt: %w", cerr)
		}
	}
	if q.deleteAllMatchStreamersStmt != nil {
		if cerr := q.deleteAllMatchStreamersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllMatchStreamersStmt: %w", cerr)
		}
	}
	if q.deleteAllMatchTeamsStmt != nil {
		if cerr := q.deleteAllMatchTeamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllMatchTeamsStmt: %w", cerr)
		}
	}
	if q.deleteGuildConfigStmt != nil {
		if cerr := q.deleteGuildConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGuildConfigStmt: %w", cerr)
		}
	}
	if q.deleteGuildMatchesStmt != nil {
		if cerr := q.deleteGuildMatchesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGuildMatchesStmt: %w", cerr)
		}
	}
	if q.deleteMatchStmt != nil {
		if cerr := q.deleteMatchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMatchStmt: %w", cerr)
		}
	}
	if q.deleteMatchModeratorStmt != nil {
		if cerr := q.deleteMatchModeratorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMatchModeratorStmt: %w", cerr)
		}
	}
	if q.deleteMatchModeratorsStmt != nil {
		if cerr := q.deleteMatchModeratorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMatchModeratorsStmt: %w", cerr)
		}
	}
	if q.deleteMatchStreamerStmt != nil {
		if cerr := q.deleteMatchStreamerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMatchStreamerStmt: %w", cerr)
		}
	}
	if q.deleteMatchStreamersStmt != nil {
		if cerr := q.deleteMatchStreamersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMatchStreamersStmt: %w", cerr)
		}
	}
	if q.deleteMatchTeamStmt != nil {
		if cerr := q.deleteMatchTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMatchTeamStmt: %w", cerr)
		}
	}
	if q.disableGuildStmt != nil {
		if cerr := q.disableGuildStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing disableGuildStmt: %w", cerr)
		}
	}
	if q.getGuildConfigStmt != nil {
		if cerr := q.getGuildConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGuildConfigStmt: %w", cerr)
		}
	}
	if q.getGuildConfigByCategoryStmt != nil {
		if cerr := q.getGuildConfigByCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGuildConfigByCategoryStmt: %w", cerr)
		}
	}
	if q.getGuildRoleAccessStmt != nil {
		if cerr := q.getGuildRoleAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGuildRoleAccessStmt: %w", cerr)
		}
	}
	if q.getGuildUserAccessStmt != nil {
		if cerr := q.getGuildUserAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGuildUserAccessStmt: %w", cerr)
		}
	}
	if q.getMatchStmt != nil {
		if cerr := q.getMatchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMatchStmt: %w", cerr)
		}
	}
	if q.getMatchTeamStmt != nil {
		if cerr := q.getMatchTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMatchTeamStmt: %w", cerr)
		}
	}
	if q.getMatchTeamByRolesStmt != nil {
		if cerr := q.getMatchTeamByRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMatchTeamByRolesStmt: %w", cerr)
		}
	}
	if q.hasRoleAccessStmt != nil {
		if cerr := q.hasRoleAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hasRoleAccessStmt: %w", cerr)
		}
	}
	if q.hasUserAccessStmt != nil {
		if cerr := q.hasUserAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hasUserAccessStmt: %w", cerr)
		}
	}
	if q.increaseMatchTeamConfirmedParticipantsStmt != nil {
		if cerr := q.increaseMatchTeamConfirmedParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing increaseMatchTeamConfirmedParticipantsStmt: %w", cerr)
		}
	}
	if q.isGuildEnabledStmt != nil {
		if cerr := q.isGuildEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isGuildEnabledStmt: %w", cerr)
		}
	}
	if q.listGuildMatchesStmt != nil {
		if cerr := q.listGuildMatchesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGuildMatchesStmt: %w", cerr)
		}
	}
	if q.listGuildRoleAccessStmt != nil {
		if cerr := q.listGuildRoleAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGuildRoleAccessStmt: %w", cerr)
		}
	}
	if q.listGuildUserAccessStmt != nil {
		if cerr := q.listGuildUserAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGuildUserAccessStmt: %w", cerr)
		}
	}
	if q.listMatchModeratorsStmt != nil {
		if cerr := q.listMatchModeratorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMatchModeratorsStmt: %w", cerr)
		}
	}
	if q.listMatchStreamersStmt != nil {
		if cerr := q.listMatchStreamersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMatchStreamersStmt: %w", cerr)
		}
	}
	if q.listMatchTeamsStmt != nil {
		if cerr := q.listMatchTeamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMatchTeamsStmt: %w", cerr)
		}
	}
	if q.nextAccessibleChannelStmt != nil {
		if cerr := q.nextAccessibleChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing nextAccessibleChannelStmt: %w", cerr)
		}
	}
	if q.nextMatchChannelDeleteStmt != nil {
		if cerr := q.nextMatchChannelDeleteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing nextMatchChannelDeleteStmt: %w", cerr)
		}
	}
	if q.nextMatchCounterStmt != nil {
		if cerr := q.nextMatchCounterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing nextMatchCounterStmt: %w", cerr)
		}
	}
	if q.nextMatchReminderStmt != nil {
		if cerr := q.nextMatchReminderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing nextMatchReminderStmt: %w", cerr)
		}
	}
	if q.nextParticipationConfirmationDeadlineStmt != nil {
		if cerr := q.nextParticipationConfirmationDeadlineStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing nextParticipationConfirmationDeadlineStmt: %w", cerr)
		}
	}
	if q.nextScheduledMatchStmt != nil {
		if cerr := q.nextScheduledMatchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing nextScheduledMatchStmt: %w", cerr)
		}
	}
	if q.removeGuildRoleAccessStmt != nil {
		if cerr := q.removeGuildRoleAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeGuildRoleAccessStmt: %w", cerr)
		}
	}
	if q.removeGuildUserAccessStmt != nil {
		if cerr := q.removeGuildUserAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeGuildUserAccessStmt: %w", cerr)
		}
	}
	if q.rescheduleMatchStmt != nil {
		if cerr := q.rescheduleMatchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing rescheduleMatchStmt: %w", cerr)
		}
	}
	if q.resetMatchReminderCountStmt != nil {
		if cerr := q.resetMatchReminderCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetMatchReminderCountStmt: %w", cerr)
		}
	}
	if q.updateCategoryIdStmt != nil {
		if cerr := q.updateCategoryIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCategoryIdStmt: %w", cerr)
		}
	}
	if q.updateGuildConfigStmt != nil {
		if cerr := q.updateGuildConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGuildConfigStmt: %w", cerr)
		}
	}
	if q.updateMatchChannelAccessibilityStmt != nil {
		if cerr := q.updateMatchChannelAccessibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMatchChannelAccessibilityStmt: %w", cerr)
		}
	}
	if q.updateMatchReminderCountStmt != nil {
		if cerr := q.updateMatchReminderCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMatchReminderCountStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                         DBTX
	tx                                         *sql.Tx
	addGuildConfigStmt                         *sql.Stmt
	addGuildRoleReadAccessStmt                 *sql.Stmt
	addGuildRoleWriteAccessStmt                *sql.Stmt
	addGuildUserAccessStmt                     *sql.Stmt
	addGuildUserWriteAccessStmt                *sql.Stmt
	addMatchStmt                               *sql.Stmt
	addMatchModeratorStmt                      *sql.Stmt
	addMatchStreamerStmt                       *sql.Stmt
	addMatchTeamStmt                           *sql.Stmt
	addMatchTeamResultsStmt                    *sql.Stmt
	decreaseMatchTeamConfirmedParticipantsStmt *sql.Stmt
	deleteAllMatchModeratorsStmt               *sql.Stmt
	deleteAllMatchStreamersStmt                *sql.Stmt
	deleteAllMatchTeamsStmt                    *sql.Stmt
	deleteGuildConfigStmt                      *sql.Stmt
	deleteGuildMatchesStmt                     *sql.Stmt
	deleteMatchStmt                            *sql.Stmt
	deleteMatchModeratorStmt                   *sql.Stmt
	deleteMatchModeratorsStmt                  *sql.Stmt
	deleteMatchStreamerStmt                    *sql.Stmt
	deleteMatchStreamersStmt                   *sql.Stmt
	deleteMatchTeamStmt                        *sql.Stmt
	disableGuildStmt                           *sql.Stmt
	getGuildConfigStmt                         *sql.Stmt
	getGuildConfigByCategoryStmt               *sql.Stmt
	getGuildRoleAccessStmt                     *sql.Stmt
	getGuildUserAccessStmt                     *sql.Stmt
	getMatchStmt                               *sql.Stmt
	getMatchTeamStmt                           *sql.Stmt
	getMatchTeamByRolesStmt                    *sql.Stmt
	hasRoleAccessStmt                          *sql.Stmt
	hasUserAccessStmt                          *sql.Stmt
	increaseMatchTeamConfirmedParticipantsStmt *sql.Stmt
	isGuildEnabledStmt                         *sql.Stmt
	listGuildMatchesStmt                       *sql.Stmt
	listGuildRoleAccessStmt                    *sql.Stmt
	listGuildUserAccessStmt                    *sql.Stmt
	listMatchModeratorsStmt                    *sql.Stmt
	listMatchStreamersStmt                     *sql.Stmt
	listMatchTeamsStmt                         *sql.Stmt
	nextAccessibleChannelStmt                  *sql.Stmt
	nextMatchChannelDeleteStmt                 *sql.Stmt
	nextMatchCounterStmt                       *sql.Stmt
	nextMatchReminderStmt                      *sql.Stmt
	nextParticipationConfirmationDeadlineStmt  *sql.Stmt
	nextScheduledMatchStmt                     *sql.Stmt
	removeGuildRoleAccessStmt                  *sql.Stmt
	removeGuildUserAccessStmt                  *sql.Stmt
	rescheduleMatchStmt                        *sql.Stmt
	resetMatchReminderCountStmt                *sql.Stmt
	updateCategoryIdStmt                       *sql.Stmt
	updateGuildConfigStmt                      *sql.Stmt
	updateMatchChannelAccessibilityStmt        *sql.Stmt
	updateMatchReminderCountStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		addGuildConfigStmt:          q.addGuildConfigStmt,
		addGuildRoleReadAccessStmt:  q.addGuildRoleReadAccessStmt,
		addGuildRoleWriteAccessStmt: q.addGuildRoleWriteAccessStmt,
		addGuildUserAccessStmt:      q.addGuildUserAccessStmt,
		addGuildUserWriteAccessStmt: q.addGuildUserWriteAccessStmt,
		addMatchStmt:                q.addMatchStmt,
		addMatchModeratorStmt:       q.addMatchModeratorStmt,
		addMatchStreamerStmt:        q.addMatchStreamerStmt,
		addMatchTeamStmt:            q.addMatchTeamStmt,
		addMatchTeamResultsStmt:     q.addMatchTeamResultsStmt,
		decreaseMatchTeamConfirmedParticipantsStmt: q.decreaseMatchTeamConfirmedParticipantsStmt,
		deleteAllMatchModeratorsStmt:               q.deleteAllMatchModeratorsStmt,
		deleteAllMatchStreamersStmt:                q.deleteAllMatchStreamersStmt,
		deleteAllMatchTeamsStmt:                    q.deleteAllMatchTeamsStmt,
		deleteGuildConfigStmt:                      q.deleteGuildConfigStmt,
		deleteGuildMatchesStmt:                     q.deleteGuildMatchesStmt,
		deleteMatchStmt:                            q.deleteMatchStmt,
		deleteMatchModeratorStmt:                   q.deleteMatchModeratorStmt,
		deleteMatchModeratorsStmt:                  q.deleteMatchModeratorsStmt,
		deleteMatchStreamerStmt:                    q.deleteMatchStreamerStmt,
		deleteMatchStreamersStmt:                   q.deleteMatchStreamersStmt,
		deleteMatchTeamStmt:                        q.deleteMatchTeamStmt,
		disableGuildStmt:                           q.disableGuildStmt,
		getGuildConfigStmt:                         q.getGuildConfigStmt,
		getGuildConfigByCategoryStmt:               q.getGuildConfigByCategoryStmt,
		getGuildRoleAccessStmt:                     q.getGuildRoleAccessStmt,
		getGuildUserAccessStmt:                     q.getGuildUserAccessStmt,
		getMatchStmt:                               q.getMatchStmt,
		getMatchTeamStmt:                           q.getMatchTeamStmt,
		getMatchTeamByRolesStmt:                    q.getMatchTeamByRolesStmt,
		hasRoleAccessStmt:                          q.hasRoleAccessStmt,
		hasUserAccessStmt:                          q.hasUserAccessStmt,
		increaseMatchTeamConfirmedParticipantsStmt: q.increaseMatchTeamConfirmedParticipantsStmt,
		isGuildEnabledStmt:                         q.isGuildEnabledStmt,
		listGuildMatchesStmt:                       q.listGuildMatchesStmt,
		listGuildRoleAccessStmt:                    q.listGuildRoleAccessStmt,
		listGuildUserAccessStmt:                    q.listGuildUserAccessStmt,
		listMatchModeratorsStmt:                    q.listMatchModeratorsStmt,
		listMatchStreamersStmt:                     q.listMatchStreamersStmt,
		listMatchTeamsStmt:                         q.listMatchTeamsStmt,
		nextAccessibleChannelStmt:                  q.nextAccessibleChannelStmt,
		nextMatchChannelDeleteStmt:                 q.nextMatchChannelDeleteStmt,
		nextMatchCounterStmt:                       q.nextMatchCounterStmt,
		nextMatchReminderStmt:                      q.nextMatchReminderStmt,
		nextParticipationConfirmationDeadlineStmt:  q.nextParticipationConfirmationDeadlineStmt,
		nextScheduledMatchStmt:                     q.nextScheduledMatchStmt,
		removeGuildRoleAccessStmt:                  q.removeGuildRoleAccessStmt,
		removeGuildUserAccessStmt:                  q.removeGuildUserAccessStmt,
		rescheduleMatchStmt:                        q.rescheduleMatchStmt,
		resetMatchReminderCountStmt:                q.resetMatchReminderCountStmt,
		updateCategoryIdStmt:                       q.updateCategoryIdStmt,
		updateGuildConfigStmt:                      q.updateGuildConfigStmt,
		updateMatchChannelAccessibilityStmt:        q.updateMatchChannelAccessibilityStmt,
		updateMatchReminderCountStmt:               q.updateMatchReminderCountStmt,
	}
}
