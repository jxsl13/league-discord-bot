// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: streamers.sql

package sqlc

import (
	"context"
	"strings"
)

const addMatchStreamer = `-- name: AddMatchStreamer :exec
INSERT INTO streamers (
    channel_id,
    user_id,
    url
) VALUES (
    ?1,
    ?2,
    ?3
)
`

type AddMatchStreamerParams struct {
	ChannelID string `db:"channel_id"`
	UserID    string `db:"user_id"`
	Url       string `db:"url"`
}

func (q *Queries) AddMatchStreamer(ctx context.Context, arg AddMatchStreamerParams) error {
	_, err := q.exec(ctx, q.addMatchStreamerStmt, addMatchStreamer, arg.ChannelID, arg.UserID, arg.Url)
	return err
}

const deleteAllMatchStreamers = `-- name: DeleteAllMatchStreamers :exec
DELETE FROM streamers
WHERE channel_id = ?1
`

func (q *Queries) DeleteAllMatchStreamers(ctx context.Context, channelID string) error {
	_, err := q.exec(ctx, q.deleteAllMatchStreamersStmt, deleteAllMatchStreamers, channelID)
	return err
}

const deleteMatchStreamer = `-- name: DeleteMatchStreamer :exec
DELETE FROM streamers
WHERE channel_id = ?1
AND user_id = ?2
`

type DeleteMatchStreamerParams struct {
	ChannelID string `db:"channel_id"`
	UserID    string `db:"user_id"`
}

func (q *Queries) DeleteMatchStreamer(ctx context.Context, arg DeleteMatchStreamerParams) error {
	_, err := q.exec(ctx, q.deleteMatchStreamerStmt, deleteMatchStreamer, arg.ChannelID, arg.UserID)
	return err
}

const deleteMatchStreamers = `-- name: DeleteMatchStreamers :exec
DELETE FROM streamers
WHERE channel_id = ?1
AND user_id IN (/*SLICE::user_ids*/?)
`

type DeleteMatchStreamersParams struct {
	ChannelID string   `db:"channel_id"`
	UserIds   []string `db:":user_ids"`
}

func (q *Queries) DeleteMatchStreamers(ctx context.Context, arg DeleteMatchStreamersParams) error {
	query := deleteMatchStreamers
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ChannelID)
	if len(arg.UserIds) > 0 {
		for _, v := range arg.UserIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE::user_ids*/?", strings.Repeat(",?", len(arg.UserIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE::user_ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const listMatchStreamers = `-- name: ListMatchStreamers :many
SELECT
    channel_id,
    user_id,
    url
FROM streamers
WHERE channel_id = ?1
`

func (q *Queries) ListMatchStreamers(ctx context.Context, channelID string) ([]Streamer, error) {
	rows, err := q.query(ctx, q.listMatchStreamersStmt, listMatchStreamers, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Streamer{}
	for rows.Next() {
		var i Streamer
		if err := rows.Scan(&i.ChannelID, &i.UserID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
