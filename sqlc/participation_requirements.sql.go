// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: participation_requirements.sql

package sqlc

import (
	"context"
)

const addParticipationRequirements = `-- name: AddParticipationRequirements :exec
INSERT INTO participation_requirements (
    channel_id,
    participants_per_team,
    deadline_at,
    entry_closed
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4
)
`

type AddParticipationRequirementsParams struct {
	ChannelID           string `db:"channel_id"`
	ParticipantsPerTeam int64  `db:"participants_per_team"`
	DeadlineAt          int64  `db:"deadline_at"`
	EntryClosed         int64  `db:"entry_closed"`
}

func (q *Queries) AddParticipationRequirements(ctx context.Context, arg AddParticipationRequirementsParams) error {
	_, err := q.exec(ctx, q.addParticipationRequirementsStmt, addParticipationRequirements,
		arg.ChannelID,
		arg.ParticipantsPerTeam,
		arg.DeadlineAt,
		arg.EntryClosed,
	)
	return err
}

const closeParticipationEntry = `-- name: CloseParticipationEntry :exec
UPDATE participation_requirements
SET
    entry_closed = 1
WHERE channel_id = ?1
`

func (q *Queries) CloseParticipationEntry(ctx context.Context, channelID string) error {
	_, err := q.exec(ctx, q.closeParticipationEntryStmt, closeParticipationEntry, channelID)
	return err
}

const deleteParticipationRequirements = `-- name: DeleteParticipationRequirements :exec
DELETE FROM participation_requirements
WHERE channel_id = ?1
`

func (q *Queries) DeleteParticipationRequirements(ctx context.Context, channelID string) error {
	_, err := q.exec(ctx, q.deleteParticipationRequirementsStmt, deleteParticipationRequirements, channelID)
	return err
}

const getParticipationRequirements = `-- name: GetParticipationRequirements :one
SELECT
    channel_id,
    participants_per_team,
    deadline_at,
    entry_closed
FROM participation_requirements
WHERE channel_id = ?1
`

func (q *Queries) GetParticipationRequirements(ctx context.Context, channelID string) (ParticipationRequirement, error) {
	row := q.queryRow(ctx, q.getParticipationRequirementsStmt, getParticipationRequirements, channelID)
	var i ParticipationRequirement
	err := row.Scan(
		&i.ChannelID,
		&i.ParticipantsPerTeam,
		&i.DeadlineAt,
		&i.EntryClosed,
	)
	return i, err
}

const listNowDueParticipationRequirements = `-- name: ListNowDueParticipationRequirements :many
SELECT
    channel_id,
    participants_per_team,
    deadline_at,
    entry_closed
FROM participation_requirements
WHERE participation_requirements.deadline_at <= unixepoch('now')
AND participation_requirements.entry_closed = 0
ORDER BY deadline_at ASC
`

func (q *Queries) ListNowDueParticipationRequirements(ctx context.Context) ([]ParticipationRequirement, error) {
	rows, err := q.query(ctx, q.listNowDueParticipationRequirementsStmt, listNowDueParticipationRequirements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ParticipationRequirement{}
	for rows.Next() {
		var i ParticipationRequirement
		if err := rows.Scan(
			&i.ChannelID,
			&i.ParticipantsPerTeam,
			&i.DeadlineAt,
			&i.EntryClosed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nextParticipationRequirement = `-- name: NextParticipationRequirement :one
SELECT
    channel_id,
    participants_per_team,
    deadline_at,
    entry_closed
FROM participation_requirements
WHERE participation_requirements.entry_closed = 0
ORDER BY deadline_at ASC
LIMIT 1
`

func (q *Queries) NextParticipationRequirement(ctx context.Context) (ParticipationRequirement, error) {
	row := q.queryRow(ctx, q.nextParticipationRequirementStmt, nextParticipationRequirement)
	var i ParticipationRequirement
	err := row.Scan(
		&i.ChannelID,
		&i.ParticipantsPerTeam,
		&i.DeadlineAt,
		&i.EntryClosed,
	)
	return i, err
}

const updateParticipationRequirements = `-- name: UpdateParticipationRequirements :exec
UPDATE participation_requirements
SET
    participants_per_team = ?1,
    deadline_at = ?2,
    entry_closed = ?3
WHERE channel_id = ?4
`

type UpdateParticipationRequirementsParams struct {
	ParticipantsPerTeam int64  `db:"participants_per_team"`
	DeadlineAt          int64  `db:"deadline_at"`
	EntryClosed         int64  `db:"entry_closed"`
	ChannelID           string `db:"channel_id"`
}

func (q *Queries) UpdateParticipationRequirements(ctx context.Context, arg UpdateParticipationRequirementsParams) error {
	_, err := q.exec(ctx, q.updateParticipationRequirementsStmt, updateParticipationRequirements,
		arg.ParticipantsPerTeam,
		arg.DeadlineAt,
		arg.EntryClosed,
		arg.ChannelID,
	)
	return err
}
